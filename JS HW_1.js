'number' + 3 + 3 'number33'   Рядок 'number' + число 3 → перетворює 3 на рядок → 'number3', потім ще + 3 → 'number33'
при складанні рядка і числа — число перетворюється на рядок.

null + 3  відповідь 3  null (не об'єкт і не число) null → 0 при числовому перетворенні

5 && "qwerty"  відповідь qwerty Якщо перше значення не нуль, не пусте — воно вважається "правдою".
(&& повертає друге значення)

+'40' + +'2' + "hillel"; відповіл=дь "42hillel" 
(40' — це текст (рядок), але ми ставимо перед ним +// Це перетворює текст у число:  '40' → 40)
+ +'2'  спосіб перетворити рядок '2' у число, яке потім додається. Другий + (перший зліва) просто бере це число для подальших обчислень.
якщо додаємо число + текст → все стає текстом // 42 + "hillel" → "42hillel" (це з'єднання)

'10' - 5 === 6;  false       false — це булеве значення (логічне значення), яке означає "неправда" або "невірно".
тому що після віднімання ми отримуємо число 5, і воно не дорівнює 6.
=== в JavaScript порівнює не тільки значення, але й типи.

true + false  результат виразу true + false — це 1. true і false — це булеві значення. 
Вони можуть бути використані для вираження двох станів: "істина" (true) і "хибність" (false).
Коли ти використовуєш + з булевими значеннями, JavaScript перетворює ці значення на числа 
true стає 1. false стає 0. true + false — це 1.

'4px' - 3 ми отримуємо значення '1px'.
4px' — це рядок, що складається з числа 4 і одиниці вимірювання px (пікселі). Тобто, '4px' означає 4 пікселі.
Операція - 3 намагається відняти число 3 від цього рядка, але ми не можемо безпосередньо відняти число від рядка. 
Тому спочатку потрібно витягнути число з рядка.
Для того, щоб витягти число з рядка, використовуємо функцію parseInt(). Ця функція бере рядок (наприклад, '4px') і повертає з нього 
тільки число. Тобто, parseInt('4px') дасть нам 4.
Тепер ми можемо виконати віднімання: 4 - 3 = 1.
Після того, як ми отримали результат 1, ми знову додаємо одиницю вимірювання px, щоб результат був у правильному форматі. 
Отже, кінцевий результат буде '1px'.
Таким чином, після виконання операції '4px' - 3 отримаємо '1px'.

'4' - 3 відповідь 1 ,  Коли JavaScript бачить рядок '4', який містить тільки цифри, він перетворює його в число. Тобто '4' стане 4.
Тепер у нас є 4 (число) і 3 (число), і ми можемо відняти їх одне від одного:тобто 4-3

'6' + 3 ** 0; відповідь 61  '6' — це рядок, тобто текст. У JavaScript, коли значення в лапках (наприклад, '6'), це завжди рядок.
3 ** 0 — це степінь (піднесення до степеня). Оператор ** означає піднесення числа до степеня.
За математичними правилами, будь-яке число, піднесене до 0, завжди дорівнює 1:  3 ** 0 буде 1.
Потім '6' об'єднується з 1, що дає результат '61'

12 / '6' Результат цього ділення — 2.0   
Коли ти намагаєшся виконати вираз 12 / '6', Python виводить помилку, бо він не може виконати операцію між числом і текстом.
Щоб Python зміг поділити 12 на число, ми повинні перетворити текст '6' у число. Це можна зробити за допомогою функції int(), 
яка перетворює рядок у ціле число.    12 / 6 — тепер Python може поділити два числа.
Чому 2.0, а не просто 2?
Python завжди повертає результат ділення у вигляді числа з десятковою точкою (тип float), навіть якщо результат ціле число.

'10' + (5 === 6); відповідь '10false' false — це булеве значення (логічне значення), яке означає "неправда" або "невірно".
(5 === 6) — це порівняння двох чисел, яке дає false (оскільки 5 не дорівнює 6).
Вираз '10' + false перетворює false на рядок `'false'.
Потім відбувається  об'єднання рядків '10' і 'false', результатом чого стає рядок '10false'.


null == ''  Результат: false 
null — це спеціальне значення, яке вказує на відсутність значення або відсутність об'єкта. У JavaScript null не є порожнім рядком або нулем.
'' — це порожній рядок. Рядок може бути порожнім, але це все одно є значенням типу string
null не є еквівалентним порожньому рядку ''. Тому вираз null == '' дасть результат false.

3 ** (9 / 3); відповідь 27
Спочатку JavaScript обчислює вираз в дужках, а саме 9 / 3.
3 ** 3 означає "3 піднесене до степеня 3", тобто 3 * 3 * 3.       
3 * 3 * 3 = 27

!!'false' == !!'true' ми отримуємо true для обох значень:
Оскільки і 'false', і 'true' є truthy, перше ! перетворить їх на false:
Отже, після двох заперечень (!!), ми отримуємо true для обох значень

0 || '0' && 1  Результат 1   && має вищий пріоритет, ніж ||.Тому спочатку рахуємо '0' && 1.
0 → falsy (бо це число нуль), '0' → truthy (бо це рядок із символом, він не порожній).
якщо перше значення неправдиве (falsy) → повертаємо його;
якщо перше правдиве (truthy) → повертаємо друге.'0' → truthy,бо це непорожній рядок; тому результат '0' && 1 → 1. 
якщо перше значення правдиве → повертаємо його;якщо неправдиве → повертаємо друге.0 → falsy,тому результат → 1.

(+null == false) < 1;відповідь: false
+null + робить з null число → це 0.
Тут знак == (звичайне порівняння).У такому випадку false теж перетворюється в число.false → 0 // це правда → true
Підставляємо назад:true  true < 1
У порівняннях true стає числом.true → 1    
Отримуємо:1 < 1  Чи менше 1 від 1? Ні,відповідь: false

false && true || true  Відповідь: true
&& має вищий пріоритет, ніж ||.Тому спочатку рахуємо false && true
(&&) дає true тільки коли обидва операнди true.Тут перший — false, другий — true → результат false.
(||) дає true, якщо хоч один операнд true.Тут є true → результат true

false && (false || true); відповідь false
Дужки завжди перші   || АБО" працює так: якщо хоча б одне значення true, тоді результат буде true.
Далі отримали false && true. Якщо хоча б одне значення у && є false, то результат завжди false.

(+null == false) < 1 ** 5; відповідь false
Унарний плюс + перетворює null у число.
Якщо робимо нестроге порівняння (==), то JS спочатку перетворює значення до числа false у числі → 0
Тобто весь вираз у дужках стає: (+null == false) → true
** — це піднесення до степеня. 1 ** 5 = 1
Тепер вираз виглядає так: true < 1  У порівнянні true автоматично перетворюється в число:
Отже маємо: 1 < 1 → false
